#https://mogile.web.fc2.com/nginx_wiki/nginx_wiki201510/modules/sr_cache.html
#https://gist.github.com/ykst/52205d4d4968298137ea0050c4569170

#docker exec -it nginx-lua_redis_1 redis-cli keys "*"
upstream redis_cluster{
    server redis:6379;
    #server redis:6380;
    keepalive 32;
    keepalive_requests 500;
    keepalive_time 1h;
}


server {
    
    listen       80;
    server_name  localhost;

    location / {
        root   /usr/local/openresty/nginx/html;
        index  index.html index.htm;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    # cache settings start
    set $cache_enabled 0;
    set $cache_clear 0;
    set $cache_method 0;#0:none, 1:get, 2:set
    if ( $request_method = POST ) {
        set $cache_enabled 1;
    }

    #/redis/$key
    if ( $request_uri ~* "/redis/([a-zA-Z0-9]+)$") {
        set $cache_enabled 1;
        set $key $1;
        set $cache_method 1;
    }

    #/redis/$key/$value
    if ( $request_uri ~* "/redis/([a-zA-Z0-9]+)/(.+)") {
        set $cache_enabled 1;
        set $key $1;
        set $value $2;
        set $cache_method 2;
    }

    # cache settings end

    #public networkに晒す時は以下忘れずに
    proxy_set_header Accept-Encoding "";
    proxy_ignore_headers Cache-Control;
    proxy_ignore_headers Set-Cookie;
    proxy_ignore_headers X-Accel-Expires;
    proxy_ignore_headers Expires;

    proxy_redirect   off;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-Proto $scheme;

    location /redis-store {
        internal;
        set_unescape_uri $exptime $arg_exptime;
        set_unescape_uri $key $arg_key;
        set_md5 $key;
        redis2_query set $host:$key $echo_request_body;
        redis2_query expire $host:$key $exptime;
        #redis2_pass redis;
    }
    location /redis-get {
        internal;
        set_md5 $key $args;
        set $redis_key $host:$key;
        #redis_pass redis;
    }

    #/say
    location /say {
        content_by_lua_block {
            ngx.say("hello, world!")
        }
    }

    #redis
    #/key/value
    location ~* /redis/(.*)/(.*) {
        redis2_query set $1 $2;
        redis2_pass redis_cluster;
    }
    #/key
    location ~* /redis/(.*) {
        redis2_query get $1;
        redis2_pass redis_cluster;
    }

    location /redis {

        resolver 127.0.0.11 valid=2s;#docker networkからコンテナ名でip引く場合のみ、resolverの設定が必要

        access_by_lua_block {
            ngx.log(ngx.INFO, "Lua block in...")
            if ( ngx.var.cache_enabled == 0) then
                return
            end

            local redis_mod = require "resty.redis"
            local redis = redis_mod:new()
            --[[ 
                dockerだとping redis と打って出たipを指定するしか、resolverを設定するか
                https://github.com/openresty/lua-resty-core/issues/45
            ]]
            local ok, err = redis:connect("redis", 6379)
            --local ok, err = redis:connect("192.168.32.4", 6379)
            if not ok then
                ngx.log( ngx.ALERT, "Failed to connect:", err)
                return
            else
                ngx.log( ngx.CRIT, "Redis connection:", ok)
            end

            redis:close()

        }

        redis2_pass redis:6379;
        if ( $cache_enabled ) {
            add_header X-Cache-Key $key;
            add_header X-Cache-Value $value;
        }

        if ( $cache_method = 1 ) {
            redis2_query get $key;
            add_header X-Cache-Get $key:$value;
        }
        if ( $cache_method = 2 ) {
            redis2_query set $key $value;
            add_header X-Cache-Set $key:$value;
        }

        try_files $uri =404;
    }

    #lua
    location /lua-log {
        content_by_lua_block {
            ngx.log(ngx.INFO, "ログチェック");
        }
    }
    location /lua-say {
        content_by_lua_block {
            ngx.say( "セイセイする");
        }
    }
    location /lua-header {
        content_by_lua_block {
            ngx.header["Content-Type"] = "text/html; charset=UTF-8";
            ngx.say( "ヘッダーをセットだ");
        }
    }


    #redis
    location /redis-internal {
        internal;
        set_unescape_uri $query $arg_query;
        set_unescape_uri $req $arg_req;
        set_unescape_uri $key $arg_key;
        if ($request_method ~ ^(POST|PUT|PATCH)$ ) {
            set_unescape_uri $cmd $arg_cmd;
            set_unescape_uri $value $arg_value;
            redis2_query $cmd samplekey $query;
            redis2_query $cmd requestbody $req;
            redis2_query $cmd $key $value;
            redis2_pass redis_cluster;
        }
        if ($request_method ~ ^(GET)$ ) {
            #redis2_query get samplekey;
            #redis2_query get requestbody;
            redis2_query get $key;
            redis2_pass redis_cluster;
        }
    }

    location /lua-redis {
        lua_need_request_body on;
        client_max_body_size 50k;
        client_body_buffer_size 50k;

        content_by_lua_block {
            if (ngx.var.request_method == ngx.HTTP_GET) then
                --Get method
                local time = ngx.time()
                local res = ngx.location.capture("/redis-internal",
                    {
                        method = "GET",
                        --body = "ping\\r\\n",
                        args = {
                            query = 'lua-redis',
                            req = ngx.var.request_method,
                            key = ngx.req.get_headers()["Key"],
                            word = "FREEWORD"
                        }
                    }
                )
                ngx.log(ngx.INFO, res.body)
                ngx.say(res.body)
            else
                --[[
                    curl -X POST -H "Key: name" -H "Value: l-freeze" -i localhost/lua-redis
                ]]
                --Other method
                local time = ngx.time()
                local res = ngx.location.capture("/redis-internal",
                    {
                        method = ngx.HTTP_POST,
                        --body = "ping\\r\\n",
                        args = {
                            cmd = 'set',
                            query = 'lua-redis setbylua',
                            req = ngx.var.request_method,
                            key = ngx.req.get_headers()["Key"],
                            value = ngx.req.get_headers()["Value"],
                            word = "FREEWORD"
                        }
                    }
                )
                ngx.log(ngx.INFO, res.body)
                ngx.say(res.body)
            end
        }
    }


    location /lua-de-redis {
        #curl -X POST -H "Key: name" -H "Value: l-freeze" -i localhost/lua-redis
        #curl -X GET -H "Key: name" -i localhost/lua-redis
        
        lua_need_request_body on;
        client_max_body_size 50k;
        client_body_buffer_size 50k;
        resolver 127.0.0.11 valid=2s;
        content_by_lua_block {
            --local cjson = require "cjson"
            local redis = require "resty.redis"
            local red = redis:new()
            local ok, err = red:connect("redis", 6379)
            if not ok then
                ngx.say("Failed to connect: ", err)
                return
            else
                ngx.log(ngx.INFO,"Connection: " .. ok)
            end

            local ans, err = red:set("resty-redis-key", "resty-redis-value")
            if not ans then
                ngx.say("Failed to set: ", err)
                return
            else
                ngx.log(ngx.INFO,"Set: " .. ans)
            end

            local res, err= red:get("resty-redis-key")
            if not res then
                ngx.say("Failed to get: ", err)
                return
            else
                ngx.log(ngx.INFO,"Get: " .. res)
            end

            ngx.log(ngx.INFO, "[REDIS]" .. res)
            ngx.say("[REDIS]" .. res)
            --red:close()
            
        }
        #return 200;
    }

}
